#!/usr/bin/env python3
"""
Database Schema Enhancement for Keyword-Based Queries
Adds missing columns for hotel/room-level keyword searches while maintaining compatibility
"""

import sqlite3
from datetime import datetime

def get_db_connection(db_path: str = "ella.db"):
    """Get database connection."""
    return sqlite3.connect(db_path)

def enhance_hotels_table():
    """Add keyword-friendly columns to hotels table."""
    
    print("üè® ENHANCING HOTELS TABLE FOR KEYWORD SEARCHES")
    print("=" * 55)
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # Check existing columns
        cursor.execute("PRAGMA table_info(hotels)")
        existing_columns = {row[1] for row in cursor.fetchall()}
        
        # Add missing keyword-friendly columns
        enhancements = [
            ("wifi_password", "VARCHAR(50)", "Hotel WiFi password for guest access"),
            ("wifi_details", "TEXT", "WiFi information and instructions"), 
            ("parking_fee", "DECIMAL(5,2)", "Daily parking fee for guests"),
            ("pet_policy", "TEXT", "Pet policy and fees"),
            ("smoking_policy", "TEXT", "Smoking policy and designated areas"),
            ("cancellation_policy", "TEXT", "Booking cancellation policy"),
            ("airport_shuttle_fee", "DECIMAL(5,2)", "Airport shuttle cost"),
            ("airport_shuttle_schedule", "VARCHAR(200)", "Shuttle timing and frequency"),
            ("concierge_hours", "VARCHAR(100)", "Concierge service hours"),
            ("room_service_hours", "VARCHAR(100)", "Room service availability"),
            ("business_center_hours", "VARCHAR(100)", "Business center operating hours"),
            ("spa_hours", "VARCHAR(100)", "Spa operating hours"),
            ("gym_hours", "VARCHAR(100)", "Fitness center hours"),
            ("pool_hours", "VARCHAR(100)", "Swimming pool hours"),
            ("currency_used", "VARCHAR(3) DEFAULT 'MYR'", "Hotel's primary currency")
        ]
        
        added_count = 0
        for column_name, column_type, description in enhancements:
            if column_name not in existing_columns:
                try:
                    cursor.execute(f"ALTER TABLE hotels ADD COLUMN {column_name} {column_type}")
                    print(f"   ‚úÖ Added: {column_name} - {description}")
                    added_count += 1
                except Exception as e:
                    print(f"   ‚ùå Failed to add {column_name}: {e}")
            else:
                print(f"   ‚ö†Ô∏è Exists: {column_name}")
        
        conn.commit()
        print(f"\nüéØ Enhanced hotels table with {added_count} new columns")

def enhance_room_types_table():
    """Add detailed amenity columns to room_types table."""
    
    print("\nüõèÔ∏è ENHANCING ROOM_TYPES TABLE FOR DETAILED SPECS")
    print("=" * 55)
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # Check existing columns
        cursor.execute("PRAGMA table_info(room_types)")
        existing_columns = {row[1] for row in cursor.fetchall()}
        
        # Add detailed feature columns
        enhancements = [
            ("bathroom_features", "TEXT", "JSON: Bathroom amenities and features"),
            ("technology_features", "TEXT", "JSON: TV, WiFi, charging, entertainment"),
            ("comfort_features", "TEXT", "JSON: Climate, bedding, furniture"),
            ("connectivity_features", "TEXT", "JSON: USB ports, outlets, adapters"),
            ("storage_features", "TEXT", "JSON: Closets, safes, storage spaces"),
            ("balcony_details", "TEXT", "Balcony size and view description"),
            ("connecting_rooms", "BOOLEAN DEFAULT 0", "Whether connecting rooms available"),
            ("accessibility_features", "TEXT", "Wheelchair and accessibility features"),
            ("child_amenities", "TEXT", "Child-friendly features and policies"),
            ("work_space_features", "TEXT", "Business and work amenities")
        ]
        
        added_count = 0
        for column_name, column_type, description in enhancements:
            if column_name not in existing_columns:
                try:
                    cursor.execute(f"ALTER TABLE room_types ADD COLUMN {column_name} {column_type}")
                    print(f"   ‚úÖ Added: {column_name} - {description}")
                    added_count += 1
                except Exception as e:
                    print(f"   ‚ùå Failed to add {column_name}: {e}")
            else:
                print(f"   ‚ö†Ô∏è Exists: {column_name}")
        
        conn.commit()
        print(f"\nüéØ Enhanced room_types table with {added_count} new columns")

def enhance_hotel_knowledge_table():
    """Add rich content columns to hotel_knowledge table."""
    
    print("\nüåü ENHANCING HOTEL_KNOWLEDGE TABLE FOR RICH CONTENT")
    print("=" * 60)
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # Check existing columns
        cursor.execute("PRAGMA table_info(hotel_knowledge)")
        existing_columns = {row[1] for row in cursor.fetchall()}
        
        # Add rich content columns
        enhancements = [
            ("exclusive_benefits", "TEXT", "Hotel guest exclusive offers and benefits"),
            ("booking_instructions", "TEXT", "How to book or make reservations"),
            ("photo_opportunities", "TEXT", "Best spots and times for photography"),
            ("seasonal_info", "TEXT", "Seasonal variations and recommendations"),
            ("group_suitability", "TEXT", "Suitability for different group sizes"),
            ("accessibility_info", "TEXT", "Accessibility information for disabled guests"),
            ("language_support", "TEXT", "Available languages and translation services"),
            ("dress_code", "VARCHAR(100)", "Dress code requirements if any"),
            ("age_restrictions", "VARCHAR(100)", "Age limits or recommendations"),
            ("weather_dependency", "TEXT", "Weather considerations and alternatives")
        ]
        
        added_count = 0
        for column_name, column_type, description in enhancements:
            if column_name not in existing_columns:
                try:
                    cursor.execute(f"ALTER TABLE hotel_knowledge ADD COLUMN {column_name} {column_type}")
                    print(f"   ‚úÖ Added: {column_name} - {description}")
                    added_count += 1
                except Exception as e:
                    print(f"   ‚ùå Failed to add {column_name}: {e}")
            else:
                print(f"   ‚ö†Ô∏è Exists: {column_name}")
        
        conn.commit()
        print(f"\nüéØ Enhanced hotel_knowledge table with {added_count} new columns")

def create_keyword_search_indexes():
    """Create indexes optimized for keyword-based searches."""
    
    print("\n‚ö° CREATING KEYWORD SEARCH INDEXES")
    print("=" * 40)
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        indexes = [
            # Hotel keyword indexes
            ("idx_hotels_keyword_search", "hotels", "(check_in_time, check_out_time, phone, email)"),
            ("idx_hotels_policies", "hotels", "(pet_policy, smoking_policy, cancellation_policy)"),
            ("idx_hotels_services", "hotels", "(wifi_details, parking_fee, airport_shuttle_fee)"),
            
            # Room keyword indexes
            ("idx_rooms_specifications", "room_types", "(bed_type, view_type, room_size_sqm, max_occupancy)"),
            ("idx_rooms_features", "room_types", "(bathroom_features, technology_features, comfort_features)"),
            ("idx_rooms_connectivity", "room_types", "(connectivity_features, balcony_details)"),
            
            # Amenity search indexes
            ("idx_amenities_operational", "hotel_amenities", "(amenity_category, is_free, operating_hours)"),
            ("idx_amenities_search", "hotel_amenities", "(amenity_name, amenity_description)"),
            
            # Knowledge base semantic indexes
            ("idx_knowledge_content_search", "hotel_knowledge", "(category, subcategory, tags, is_recommended)"),
            ("idx_knowledge_exclusives", "hotel_knowledge", "(exclusive_benefits, booking_instructions)")
        ]
        
        created_count = 0
        for index_name, table_name, columns in indexes:
            try:
                cursor.execute(f"CREATE INDEX IF NOT EXISTS {index_name} ON {table_name} {columns}")
                print(f"   ‚úÖ Created: {index_name}")
                created_count += 1
            except Exception as e:
                print(f"   ‚ùå Failed to create {index_name}: {e}")
        
        conn.commit()
        print(f"\nüéØ Created {created_count} search optimization indexes")

def add_sample_keyword_data():
    """Add sample keyword-friendly data for testing."""
    
    print("\nüß™ ADDING SAMPLE KEYWORD DATA FOR TESTING")
    print("=" * 50)
    
    with get_db_connection() as conn:
        cursor = conn.cursor()
        
        # Check if Grand Hyatt exists
        cursor.execute("SELECT property_id FROM hotels WHERE property_id = 'grand_hyatt_kuala_lumpur'")
        if cursor.fetchone():
            # Update Grand Hyatt with keyword-friendly data
            cursor.execute("""
                UPDATE hotels SET 
                    wifi_password = 'GrandHyatt2024',
                    wifi_details = 'Complimentary high-speed WiFi throughout the property. Password: GrandHyatt2024',
                    parking_fee = 25.00,
                    pet_policy = 'Small pets (under 10kg) welcome. RM50/night surcharge. Advanced notice required.',
                    smoking_policy = 'Non-smoking hotel. Designated smoking areas available on Level 3 outdoor terrace.',
                    cancellation_policy = 'Free cancellation up to 24 hours before check-in. Late cancellation fee: 1 night charge.',
                    airport_shuttle_fee = 15.00,
                    airport_shuttle_schedule = 'Every 30 minutes, 5:00 AM - 11:00 PM daily',
                    concierge_hours = '24/7 at front desk and via phone extension 0',
                    room_service_hours = '24/7 in-room dining available',
                    business_center_hours = '24/7 with keycard access',
                    spa_hours = '9:00 AM - 9:00 PM daily',
                    gym_hours = '24/7 for hotel guests with keycard access',
                    pool_hours = '6:00 AM - 10:00 PM daily',
                    currency_used = 'MYR'
                WHERE property_id = 'grand_hyatt_kuala_lumpur'
            """)
            print("   ‚úÖ Updated Grand Hyatt KL with keyword data")
        
        # Update room types with detailed features
        cursor.execute("SELECT room_type_id FROM room_types LIMIT 1")
        if cursor.fetchone():
            cursor.execute("""
                UPDATE room_types SET
                    bathroom_features = '["Rain shower", "Soaking bathtub", "Marble surfaces", "Premium toiletries", "Hair dryer", "Magnifying mirror"]',
                    technology_features = '["55-inch Smart TV", "High-speed WiFi", "USB charging ports", "International adapters", "Bluetooth speakers"]',
                    comfort_features = '["Blackout curtains", "Climate control", "Premium bedding", "Pillow menu", "Turn-down service"]',
                    connectivity_features = '["Bedside USB ports", "Desk power outlets", "International adapters", "WiFi range extender"]',
                    storage_features = '["Walk-in closet", "Electronic safe", "Luggage storage", "Multiple drawers"]',
                    balcony_details = 'Private balcony with city views, outdoor seating for 2',
                    connecting_rooms = 1,
                    accessibility_features = 'Wheelchair accessible, roll-in shower available on request',
                    child_amenities = 'Baby cot available (free), child safety kit, kids bathroom amenities',
                    work_space_features = 'Large work desk, ergonomic chair, power outlets, good lighting'
                WHERE room_type_id LIKE '%grand_hyatt_kuala_lumpur%'
            """)
            print("   ‚úÖ Updated room types with detailed features")
        
        conn.commit()
        print(f"\nüéØ Added sample keyword data for testing")

def validate_existing_tools_compatibility():
    """Ensure existing tools still work with enhanced schema."""
    
    print("\nüîß VALIDATING EXISTING TOOLS COMPATIBILITY")
    print("=" * 50)
    
    try:
        # Test hotel search tool queries
        with get_db_connection() as conn:
            cursor = conn.cursor()
            
            # Test basic hotel query (hotel_search_tool.py)
            cursor.execute("""
                SELECT h.property_id, h.hotel_name, h.star_rating 
                FROM hotels h 
                WHERE h.is_active = 1 
                LIMIT 1
            """)
            result1 = cursor.fetchone()
            
            # Test room types query (hotel_search_tool.py)
            cursor.execute("""
                SELECT rt.room_type_id, rt.room_name, rt.base_price_per_night
                FROM room_types rt
                WHERE rt.is_active = 1 
                LIMIT 1
            """)
            result2 = cursor.fetchone()
            
            # Test concierge query (concierge_intelligence.py)
            cursor.execute("""
                SELECT hfa.answer_title, hfa.answer_content
                FROM hotel_faq_answers hfa
                WHERE hfa.is_active = 1
                LIMIT 1
            """)
            result3 = cursor.fetchone()
            
            # Test knowledge base query
            cursor.execute("""
                SELECT hk.title, hk.description
                FROM hotel_knowledge hk
                LIMIT 1
            """)
            result4 = cursor.fetchone()
            
            if all([result1, result2]):
                print("   ‚úÖ Hotel search tools: Compatible")
            else:
                print("   ‚ö†Ô∏è Hotel search tools: Missing data")
                
            if result3:
                print("   ‚úÖ Concierge FAQ system: Compatible")
            else:
                print("   ‚ö†Ô∏è Concierge FAQ system: Missing data")
                
            if result4:
                print("   ‚úÖ Knowledge base system: Compatible")
            else:
                print("   ‚ö†Ô∏è Knowledge base system: Missing data")
                
        print("\nüéØ Schema enhancement maintains tool compatibility")
        
    except Exception as e:
        print(f"   ‚ùå Compatibility issue: {e}")

def main():
    """Main enhancement function."""
    
    print("üîß DATABASE SCHEMA ENHANCEMENT FOR KEYWORD SEARCHES")
    print("=" * 65)
    print("Enhancing database to support 3-tier information architecture:")
    print("1. Hotel-level keywords (policies, services, facilities)")
    print("2. Room-level keywords (specifications, features, amenities)")  
    print("3. Knowledge bank (experiences, recommendations, content)")
    print()
    
    try:
        # Enhance tables
        enhance_hotels_table()
        enhance_room_types_table()
        enhance_hotel_knowledge_table()
        
        # Create search indexes
        create_keyword_search_indexes()
        
        # Add sample data
        add_sample_keyword_data()
        
        # Validate compatibility
        validate_existing_tools_compatibility()
        
        print("\nüéâ SCHEMA ENHANCEMENT COMPLETE!")
        print("=" * 40)
        print("‚úÖ Enhanced hotel keyword searches")
        print("‚úÖ Enhanced room specification searches")
        print("‚úÖ Enhanced knowledge base content")
        print("‚úÖ Created search optimization indexes")
        print("‚úÖ Added sample keyword data")
        print("‚úÖ Validated existing tool compatibility")
        print()
        print("The database now supports the full 3-tier information architecture")
        print("while maintaining compatibility with all existing tools.")
        
    except Exception as e:
        print(f"\n‚ùå Enhancement failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 